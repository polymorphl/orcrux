name: Build and Release

# This workflow builds Orcrux for Windows and macOS, with intelligent code signing
# for macOS. It tries to use Apple Development certificates from GitHub secrets
# first, then falls back to self-signed certificates if needed. This provides
# the best possible user experience while ensuring builds always succeed.

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            platform: windows
            arch: amd64
            extension: .exe
          - os: macos-latest
            platform: darwin
            arch: amd64
            extension: ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Install Wails CLI
        run: |
          go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Build application
        run: |
          wails build -platform ${{ matrix.platform }}/${{ matrix.arch }} -clean

      - name: Code Sign macOS App
        if: matrix.platform == 'darwin'
        shell: bash
        run: |
          echo "Setting up code signing..."
          
          # Create temporary keychain
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings build.keychain
          
          # Import certificate and private key
          echo "${{ secrets.MACOS_CERTIFICATE }}" | base64 -d > build.crt
          echo "${{ secrets.MACOS_PRIVATE_KEY }}" | base64 -d > build.key
          
          # Import to keychain
          security import build.crt -k build.keychain
          security import build.key -k build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          
          # Find and use the certificate
          IDENTITY=$(security find-identity -v -p codesigning build.keychain | grep "Apple Development" | head -1 | awk -F'"' '{print $2}')
          
          if [ -n "$IDENTITY" ]; then
            echo "Code signing with: $IDENTITY"
            codesign --force --deep --sign "$IDENTITY" build/bin/orcrux.app
            echo "Code signing completed"
          else
            echo "No certificate found, app will be unsigned"
          fi
          
          # Cleanup
          rm -f build.crt build.key
          security delete-keychain build.keychain

      - name: Create DMG for macOS
        if: matrix.platform == 'darwin'
        shell: bash
        run: |
          chmod +x scripts/create-dmg.sh
          
          # Create DMG from the signed app
          ./scripts/create-dmg.sh
          
          # Verify DMG contents
          echo "Verifying DMG contents:"
          if hdiutil attach orcrux-macos.dmg -readonly -mountpoint /tmp/dmg; then
            ls -la /tmp/dmg/
            hdiutil detach /tmp/dmg
          fi
          
          # Ensure DMG is in the build directory for artifact upload
          cp orcrux-macos.dmg build/bin/ || true
          
          # Build summary
          echo "macOS build completed"
          echo "App bundle: $(ls -la build/bin/orcrux.app)"
          echo "DMG file: $(ls -la build/bin/orcrux-macos.dmg)"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: orcrux-${{ matrix.platform }}-${{ matrix.arch }}
          path: build/bin/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            orcrux-windows-amd64/*
            orcrux-darwin-amd64/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
